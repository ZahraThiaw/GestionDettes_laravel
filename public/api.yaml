info:
  title: Coronatime API
  description: Here goes description
  version: 0.1.9

servers:
  - url: http://localhost:3000/wane/v1
    description: local server
  - url: http://producation.app/api
    description: production server

openapi: 3.0.0

paths:
  /login:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT token upon successful login.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
      responses:
        '200':
          description: Successful login, returns a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '403':
          description: Unauthorized login attempt.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: Echec
                  message:
                    type: string
                    example: Unauthorized
                  httpStatus:
                    type: integer
                    example: 403

  /logout:
    post:
      summary: User logout
      description: Logs out an authenticated user and invalidates their JWT token.
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Successfully logged out
                  httpStatus:
                    type: integer
                    example: 200

  /users:
    post:
      summary: Create a new user
      description: Creates a new user in the system, only accessible to admin users.
      tags:
        - Users
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                nom:
                  type: string
                  example: John 
                prenom:
                  type: string
                  example: John Doe
                login:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: password123
                password_confirmation:
                  type: string
                  example: password123
                role_id:
                  type: integer
                  example: 1
                photo:
                  type: string
                  example: https://res.cloudinary.com/ddxlmn8vh/image/upload/v1725616746/douasjuzt04n4c4cit2e.jpg
                active:
                  type: boolean
                  example: true
              required:
                - nom
                - prenom
                - login
                - password
                - password_confirmation
                - role_id
                - photo
                - active
      responses:
        '201':
          description: User successfully created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      nom:
                        type: string
                        example: John 
                      prenom:
                        type: string
                        example: John Doe
                      login:
                        type: string
                        example: johndoe@example.com
                      password:
                        type: string
                        example: password123
                      password_confirmation:
                        type: string
                        example: password123
                      role_id:
                        type: integer
                        example: 1
                      photo:
                        type: string
                        example: https://res.cloudinary.com/ddxlmn8vh/image/upload/v1725616746/douasjuzt04n4c4cit2e.jpg
                      active:
                        type: boolean
                        example: true
                  message:
                    type: string
                    example: Utilisateur créé avec succès.
                  httpStatus:
                    type: integer
                    example: 201
        '500':
          description: Error creating user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Erreur lors de la création de l'utilisateur
                  httpStatus:
                    type: integer
                    example: 500
    get:
      summary: List users
      description: Retrieves a list of users, with optional filters for role and active status.
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: role
          schema:
            type: string
          description: Filter users by role name.
          example: Admin
        - in: query
          name: active
          schema:
            type: string
            enum: ['true', 'false']
          description: Filter users by active status ('oui' for active, 'non' for inactive).
      responses:
        '200':
          description: List of users retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: John Doe
                        email:
                          type: string
                          example: johndoe@example.com
                        role_id:
                          type: integer
                          example: 1
                        active:
                          type: boolean
                          example: true
                  message:
                    type: string
                    example: Liste des utilisateurs récupérée avec succès.
                  httpStatus:
                    type: integer
                    example: 200
        '400':
          description: No users found or invalid role specified.
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Aucun utilisateur trouvé ou le rôle spécifié est invalide.
                  httpStatus:
                    type: integer
                    example: 400

  /articles:
    get:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Récupère la liste des articles disponibles"
      operationId: "getArticles"
      parameters:
        - in: query
          name: disponible
          schema:
            type: string
            enum: [oui, non]
          description: Filtrer les articles par disponibilité.
      responses:
        200:
          description: "Liste des articles récupérée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        libelle:
                          type: string
                        prix:
                          type: number
                          format: float
                        qteStock:
                          type: integer
                  message:
                    type: string
                    example: "Liste des articles récupérée avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucun article trouvé."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucun article trouvé."
                  httpStatus:
                    type: integer
                    example: 404
    post:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Créer un nouvel article"
      operationId: "createArticle"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Article A"
                prix:
                  type: number
                  format: float
                  example: 1500.00
                qteStock:
                  type: integer
                  example: 10
      responses:
        200:
          description: "Article créé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      libelle:
                        type: string
                      prix:
                        type: number
                      qteStock:
                        type: integer
                  message:
                    type: string
                    example: "Article créé avec succès"
                  httpStatus:
                    type: integer
                    example: 200

  /articles/{id}:
    get:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Récupère les détails d'un article par son ID"
      operationId: "getArticleById"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'article
      responses:
        200:
          description: "Article récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      libelle:
                        type: string
                      prix:
                        type: number
                      qteStock:
                        type: integer
                  message:
                    type: string
                    example: "Article récupéré avec succès"
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Article non trouvé"
                  httpStatus:
                    type: integer
                    example: 404
    patch:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Mise à jour partielle d'un article"
      description: "Met à jour partiellement un article existant en fonction de son ID."
      parameters:
        - name: id
          in: path
          required: true
          description: "ID de l'article à mettre à jour"
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Nom de l'article modifié"
                prix:
                  type: number
                  format: float
                  example: 29.99
                qteStock:
                  type: integer
                  example: 100
              required:
                - libelle
                - prix
                - qteStock
      responses:
        200:
          description: "Article mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      libelle:
                        type: string
                        example: "Nom de l'article mis à jour"
                      prix:
                        type: number
                        format: float
                        example: 29.99
                      qteStock:
                        type: integer
                        example: 100
                  message:
                    type: string
                    example: "Article mis à jour avec succès"
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Article non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Article non trouvé"
                  httpStatus:
                    type: integer
                    example: 404
        400:
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Requête invalide"
                  httpStatus:
                    type: integer
                    example: 400
    put:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Met à jour les détails d'un article par son ID"
      operationId: "updateArticle"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'article
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  example: "Article B"
                prix:
                  type: number
                  format: float
                  example: 1800.00
                qteStock:
                  type: integer
                  example: 20
      responses:
        200:
          description: "Article mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      libelle:
                        type: string
                      prix:
                        type: number
                      qteStock:
                        type: integer
                  message:
                    type: string
                    example: "Article mis à jour avec succès"
                  httpStatus:
                    type: integer
                    example: 200
    delete:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Supprime un article par son ID (soft delete)"
      operationId: "deleteArticle"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: ID de l'article
      responses:
        200:
          description: "Article supprimé avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "Article supprimé avec succès"
                  httpStatus:
                    type: integer
                    example: 200

  # /articles/restore/{id}:
  #   post:
  #     tags:
  #       - Articles
  #     security:
  #       - bearerAuth: []
  #     summary: "Restaure un article supprimé par son ID"
  #     operationId: "restoreArticle"
  #     parameters:
  #       - name: id
  #         in: path
  #         required: true
  #         schema:
  #           type: integer
  #         description: ID de l'article
  #     responses:
  #       200:
  #         description: "Article restauré avec succès"
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 statut:
  #                   type: string
  #                   example: "Success"
  #                 message:
  #                   type: string
  #                   example: "Article restauré avec succès"
  #                 httpStatus:
  #                   type: integer
  #                   example: 200

  /articles/stock:
    post:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Mise à jour du stock d'articles"
      description: "Met à jour les quantités en stock pour plusieurs articles."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: "ID de l'article"
                    example: 1
                  qteStock:
                    type: integer
                    description: "Nouvelle quantité en stock"
                    example: 50
              required:
                - id
                - qteStock
      responses:
        200:
          description: "Mise à jour du stock effectuée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        libelle:
                          type: string
                          example: "Nom de l'article"
                        prix:
                          type: number
                          format: float
                          example: 25.99
                        qteStock:
                          type: integer
                          example: 50
                  message:
                    type: string
                    example: "Mise à jour du stock effectuée avec succès"
                  httpStatus:
                    type: integer
                    example: 200
        400:
          description: "Requête invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Données invalides pour la mise à jour du stock"
                  httpStatus:
                    type: integer
                    example: 400

  /articles/libelle:
    post:
      tags:
        - Articles
      security:
        - bearerAuth: []
      summary: "Filtrer les articles par libellé"
      description: "Filtre et récupère les articles correspondant au libellé fourni."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                libelle:
                  type: string
                  description: "Libellé de l'article à rechercher"
                  example: "Chaise"
              required:
                - libelle
      responses:
        200:
          description: "Article récupéré avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        libelle:
                          type: string
                          example: "Chaise"
                        prix:
                          type: number
                          format: float
                          example: 29.99
                        qteStock:
                          type: integer
                          example: 100
                  message:
                    type: string
                    example: "Article récupéré avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucun article trouvé avec ce libellé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucun article trouvé avec ce libellé"
                  httpStatus:
                    type: integer
                    example: 404

  /clients:
    get:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Récupérer la liste des clients
      responses:
        '200':
          description: Liste des clients récupérée avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        surnom:
                          type: string
                        telephone:
                          type: string
                        adresse:
                          type: string
                        active:
                          type: boolean
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '404':
          description: Aucun client trouvé
    post:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Créer un nouveau client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surnom:
                  type: string
                telephone:
                  type: string
                adresse:
                  type: string
                user:
                  type: object
                  properties:
                    login:
                      type: string
                    password:
                      type: string
      responses:
        '200':
          description: Client enregistré avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      client:
                        type: object
                        properties:
                          id:
                            type: integer
                          surnom:
                            type: string
                          telephone:
                            type: string
                          adresse:
                            type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '500':
          description: Erreur lors de l'enregistrement

  /clients/{id}:
    get:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Récupérer un client par son ID
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Client récupéré avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      surnom:
                        type: string
                      telephone:
                        type: string
                      adresse:
                        type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '404':
          description: Client non trouvé
    put:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Mettre à jour un client
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surnom:
                  type: string
                telephone:
                  type: string
                adresse:
                  type: string
      responses:
        '200':
          description: Client mis à jour avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      surnom:
                        type: string
                      telephone:
                        type: string
                      adresse:
                        type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '500':
          description: Erreur lors de la mise à jour
    patch:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: "Mettre à jour un client"
      description: "Cette route met à jour les informations d'un client spécifique."
      operationId: "updateClient"
      parameters:
        - name: id
          in: path
          required: true
          description: "Identifiant du client à mettre à jour"
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                surnom:
                  type: string
                  example: "Jean Dupont"
                  description: "Le surnom du client"
                telephone:
                  type: string
                  example: "+33612345678"
                  description: "Le numéro de téléphone du client"
                adresse:
                  type: string
                  example: "12 rue de Paris, 75000 Paris"
                  description: "L'adresse du client"
              required:
                - surnom
                - telephone
      responses:
        200:
          description: "Client mis à jour avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                    description: "Le statut de la réponse"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      surnom:
                        type: string
                        example: "Jean Dupont"
                      telephone:
                        type: string
                        example: "+33612345678"
                      adresse:
                        type: string
                        example: "12 rue de Paris, 75000 Paris"
                    description: "Les informations du client mis à jour"
                  message:
                    type: string
                    example: "Client mis à jour avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        400:
          description: "Mauvaise requête - Données invalides"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Données invalides."
                  httpStatus:
                    type: integer
                    example: 400
        404:
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Client non trouvé."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la mise à jour du client."
                  httpStatus:
                    type: integer
                    example: 500
    delete:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Supprimer un client
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Client supprimé avec succès
        '500':
          description: Erreur lors de la suppression

  /clients/telephone:
    post:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Filtrer un client par téléphone
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                telephone:
                  type: string
      responses:
        '200':
          description: Client trouvé
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                      surnom:
                        type: string
                      telephone:
                        type: string
                      adresse:
                        type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '404':
          description: Client non trouvé

  /clients/{clientId}/register:
    post:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Enregistrer un compte utilisateur pour un client existant
      parameters:
        - in: path
          name: clientId
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Compte utilisateur créé avec succès pour le client
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      client:
                        type: object
                        properties:
                          id:
                            type: integer
                          surnom:
                            type: string
                          telephone:
                            type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '500':
          description: Erreur lors de la création du compte

  /clients/{id}/user:
    post:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: Récupérer un client avec utilisateur
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Client et utilisateur récupérés avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                  data:
                    type: object
                    properties:
                      client:
                        type: object
                        properties:
                          id:
                            type: integer
                          surnom:
                            type: string
                      user:
                        type: object
                        properties:
                          login:
                            type: string
                          email:
                            type: string
                  message:
                    type: string
                  httpStatus:
                    type: integer
        '404':
          description: Client ou utilisateur non trouvé

  /clients/{id}/dettes:
    post:
      tags:
        - Clients
      security:
        - bearerAuth: []
      summary: "Obtenir les dettes d'un client"
      description: "Cette route permet d'obtenir les dettes associées à un client spécifique."
      operationId: "getClientDettes"
      parameters:
        - name: id
          in: path
          required: true
          description: "Identifiant du client"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Dettes du client récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      client:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          surnom:
                            type: string
                            example: "Jean Dupont"
                          telephone:
                            type: string
                            example: "+33612345678"
                          adresse:
                            type: string
                            example: "12 rue de Paris, 75000 Paris"
                      dettes:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            montant_total:
                              type: number
                              example: 200.5
                            montant_verse:
                              type: number
                              example: 50.0
                  message:
                    type: string
                    example: "Client trouvé."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Client non trouvé."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des dettes."
                  httpStatus:
                    type: integer
                    example: 500

  /dettes:
    post:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Enregistrer une nouvelle dette"
      description: "Cette route permet d'enregistrer une nouvelle dette avec ses détails."
      operationId: "createDette"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: integer
                  example: 158
                  description: "ID du client"
                articles:
                  type: array
                  description: "Liste des articles associés à la dette"
                  items:
                    type: object
                    properties:
                      article_id:
                        type: integer
                        example: 1
                        description: "ID de l'article"
                      qteStock:
                        type: integer
                        example: 3
                        description: "Quantité en stock de l'article"
              required:
                - client_id
                - articles
      responses:
        201:
          description: "Dette enregistrée avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                        description: "ID de la dette"
                      client_id:
                        type: integer
                        example: 158
                        description: "ID du client"
                      montant_total:
                        type: number
                        example: 200.5
                        description: "Montant total de la dette"
                      montant_verse:
                        type: number
                        example: 50.0
                        description: "Montant versé sur la dette"
                      articles:
                        type: array
                        items:
                          type: object
                          properties:
                            article_id:
                              type: integer
                              example: 1
                              description: "ID de l'article"
                            qteStock:
                              type: integer
                              example: 3
                              description: "Quantité en stock de l'article"
                    description: "Les détails de la dette enregistrée"
                  message:
                    type: string
                    example: "Dette enregistrée avec succès."
                  httpStatus:
                    type: integer
                    example: 201
        411:
          description: "Erreur lors de l'enregistrement de la dette"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Dette non enregistrée."
                  httpStatus:
                    type: integer
                    example: 411
        500:
          description: "Erreur serveur"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur interne."
                  httpStatus:
                    type: integer
                    example: 500

    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Lister toutes les dettes"
      description: "Cette route permet de lister toutes les dettes ou de filtrer par statut."
      operationId: "listDettes"
      parameters:
        - name: statut
          in: query
          required: false
          description: "Statut des dettes à filtrer"
          schema:
            type: string
            example: "non payée"
      responses:
        200:
          description: "Dettes récupérées avec succès"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    description: "Liste des dettes"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        client_id:
                          type: integer
                          example: 1
                        montant_total:
                          type: number
                          example: 200.5
                        montant_verse:
                          type: number
                          example: 50.0
                  message:
                    type: string
                    example: "Dettes récupérées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune dette trouvée"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "Aucune dette trouvée."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des dettes."
                  httpStatus:
                    type: integer
                    example: 500


  /dettes/archive:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Obtenir toutes les dettes archivées"
      description: "Récupère la liste de toutes les dettes archivées."
      operationId: "getArchivedDebts"
      responses:
        200:
          description: "Liste des dettes archivées récupérée avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    description: "Liste des dettes archivées"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        client_id:
                          type: integer
                          example: 1
                        montant_total:
                          type: number
                          format: float
                          example: 200.5
                        montant_verse:
                          type: number
                          format: float
                          example: 50.0
                        archived_at:
                          type: string
                          format: date-time
                          example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Liste des dettes archivées récupérée avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        500:
          description: "Erreur serveur lors de la récupération des dettes archivées"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Impossible de récupérer les dettes archivées."
                  httpStatus:
                    type: integer
                    example: 500

  /archive/clients/{clientId}/dettes:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Obtenir les dettes archivées d'un client spécifique"
      description: "Récupère les dettes archivées pour un client spécifique basé sur son ID."
      operationId: "getArchivedDebtsByClient"
      parameters:
        - name: clientId
          in: path
          required: true
          description: "ID du client pour lequel récupérer les dettes archivées"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Dettes archivées du client récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    description: "Liste des dettes archivées du client"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        client_id:
                          type: integer
                          example: 1
                        montant_total:
                          type: number
                          format: float
                          example: 200.5
                        montant_verse:
                          type: number
                          format: float
                          example: 50.0
                        archived_at:
                          type: string
                          format: date-time
                          example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Dettes du client récupérées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        500:
          description: "Erreur serveur lors de la récupération des dettes du client"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Impossible de récupérer les dettes du client."
                  httpStatus:
                    type: integer
                    example: 500

  /archive/dettes/{debtId}:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Obtenir une dette archivée par son ID"
      description: "Récupère une dette archivée spécifique basée sur son ID."
      operationId: "getArchivedDebtById"
      parameters:
        - name: debtId
          in: path
          required: true
          description: "ID de la dette archivée à récupérer"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Dette archivée récupérée avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      client_id:
                        type: integer
                        example: 1
                      montant_total:
                        type: number
                        format: float
                        example: 200.5
                      montant_verse:
                        type: number
                        format: float
                        example: 50.0
                      archived_at:
                        type: string
                        format: date-time
                        example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Dette récupérée avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        500:
          description: "Erreur serveur lors de la récupération de la dette"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Impossible de récupérer cette dette."
                  httpStatus:
                    type: integer
                    example: 500

  /restaure/{date}:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Restaurer les dettes archivées d'une date spécifique"
      description: "Restaure les dettes archivées basées sur une date spécifique."
      operationId: "restoreArchivedDebtsByDate"
      parameters:
        - name: date
          in: path
          required: true
          description: "Date pour laquelle restaurer les dettes archivées (format : YYYY-MM-DD)"
          schema:
            type: string
            example: "2024-09-16"
      responses:
        200:
          description: "Dettes archivées restaurées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    description: "Liste des dettes restaurées"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        client_id:
                          type: integer
                          example: 1
                        montant_total:
                          type: number
                          format: float
                          example: 200.5
                        montant_verse:
                          type: number
                          format: float
                          example: 50.0
                        restored_at:
                          type: string
                          format: date-time
                          example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Dettes archivées restaurées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune dette archivée trouvée pour cette date"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucune dette archivée pour cette date."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur lors de la restauration des dettes archivées"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la restauration des dettes archivées."
                  httpStatus:
                    type: integer
                    example: 500

  /restaure/dette/{debtId}:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Restaurer une dette archivée spécifique"
      description: "Restaure une dette archivée spécifique basée sur son ID."
      operationId: "restoreArchivedDebt"
      parameters:
        - name: debtId
          in: path
          required: true
          description: "ID de la dette à restaurer"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Dette restaurée avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      client_id:
                        type: integer
                        example: 1
                      montant_total:
                        type: number
                        format: float
                        example: 200.5
                      montant_verse:
                        type: number
                        format: float
                        example: 50.0
                      restored_at:
                        type: string
                        format: date-time
                        example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Dette restaurée avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Cette dette n'existe pas ou est déjà restaurée."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Cette dette n'existe pas ou est déjà restaurée."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur lors de la restauration de la dette"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la restauration de la dette."
                  httpStatus:
                    type: integer
                    example: 500

  /restaure/client/{clientId}:
    get:
      tags:
        - Dettes
      security:
        - bearerAuth: []
      summary: "Restaurer les dettes archivées d'un client spécifique"
      description: "Restaure toutes les dettes archivées pour un client spécifique basé sur son ID."
      operationId: "restoreArchivedDebtsByClient"
      parameters:
        - name: clientId
          in: path
          required: true
          description: "ID du client pour lequel restaurer les dettes archivées"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Dettes du client restaurées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    description: "Liste des dettes restaurées"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        client_id:
                          type: integer
                          example: 1
                        montant_total:
                          type: number
                          format: float
                          example: 200.5
                        montant_verse:
                          type: number
                          format: float
                          example: 50.0
                        restored_at:
                          type: string
                          format: date-time
                          example: "2024-09-16T00:00:00Z"
                  message:
                    type: string
                    example: "Dettes du client restaurées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Les dettes du client n'existent pas ou sont déjà restaurées."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Les dettes du client n'existent pas ou sont déjà restaurées."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur lors de la restauration des dettes du client"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la restauration des dettes du client."
                  httpStatus:
                    type: integer
                    example: 500

  /notification/client/{id}:
    get:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Envoyer une notification à un client spécifique"
      description: "Envoie une notification de rappel à un client spécifique basé sur son ID."
      operationId: "sendToOneClient"
      parameters:
        - name: id
          in: path
          required: true
          description: "ID du client à notifier"
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Notification envoyée au client avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Notification envoyée au client."
                  notification:
                    type: object
                    properties:
                      client_surnom:
                        type: string
                        example: "Durand"
                      client_telephone:
                        type: string
                        example: "+123456789"
        404:
          description: "Client non trouvé"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Client non trouvé"
        500:
          description: "Erreur serveur lors de l'envoi de la notification"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Erreur lors de l'envoi de la notification."

  /notification/client/all:
    post:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Envoyer des notifications à des clients spécifiques"
      description: "Envoie des notifications de rappel à une liste de clients spécifiés."
      operationId: "sendToSpecificClients"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
      responses:
        200:
          description: "Notifications envoyées aux clients avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Notifications envoyées aux clients avec des dettes."
                  clients_avec_dettes:
                    type: array
                    items:
                      type: object
                  clients_sans_dettes:
                    type: array
                    items:
                      type: object
                  clients_invalides:
                    type: array
                    items:
                      type: object
        400:
          description: "Liste des IDs de clients invalide"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Veuillez fournir une liste valide d'ID de clients."
        500:
          description: "Erreur serveur lors de l'envoi des notifications"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Erreur lors de l'envoi des notifications."

  /notification/client/message:
    post:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Envoyer un message personnalisé à des clients spécifiques"
      description: "Envoie un message personnalisé à une liste de clients spécifiés."
      operationId: "sendCustomMessageToClients"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                client_ids:
                  type: array
                  items:
                    type: integer
                  example: [1, 2, 3]
                message:
                  type: string
                  example: "Votre solde est dû."
      responses:
        200:
          description: "Messages personnalisés envoyés aux clients avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Notifications envoyées aux clients avec le message personnalisé."
                  clients_avec_dettes:
                    type: array
                    items:
                      type: object
                  clients_sans_dettes:
                    type: array
                    items:
                      type: object
                  clients_invalides:
                    type: array
                    items:
                      type: object
        400:
          description: "Données de la requête invalides"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Veuillez fournir une liste valide d'ID de clients et un message."
        500:
          description: "Erreur serveur lors de l'envoi des messages"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Erreur lors de l'envoi des messages personnalisés."

  /demandes/notifications:
    get:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Obtenir les notifications de demandes soumises pour le boutiquier"
      description: "Récupère les notifications non lues pour le boutiquier et les marque comme lues."
      operationId: "getBoutiquierNotifications"
      responses:
        200:
          description: "Notifications de demandes soumises récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: "Notifications de demandes soumises récupérées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune notification de demande soumise"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucune notification de demandes soumises."
                  httpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur lors de la récupération des notifications de demandes"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications de demandes soumises."
                  httpStatus:
                    type: integer
                    example: 500

  /notifications/unread:
    get:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Obtenir les notifications non lues du client"
      description: "Récupère les notifications non lues pour le client connecté et les marque comme lues."
      operationId: "getUnreadNotifications"
      responses:
        200:
          description: "Notifications non lues récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: "Notifications non lues du client récupérées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune notification non lue"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucune notification non lue pour le client."
                  httpStatus:
                    type: integer
                    example: 404
        401:
          description: "Client non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Client non authentifié"
                  httpStatus:
                    type: integer
                    example: 401
        500:
          description: "Erreur serveur lors de la récupération des notifications non lues"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications non lues."
                  httpStatus:
                    type: integer
                    example: 500

  /notifications/read:
    get:
      tags:
        - Notifications
      security:
        - bearerAuth: []
      summary: "Obtenir les notifications lues du client"
      description: "Récupère les notifications lues pour le client connecté."
      operationId: "getReadNotifications"
      responses:
        200:
          description: "Notifications lues récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: "Notifications lues du client récupérées avec succès."
                  httpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune notification lue"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucune notification lue pour le client."
                  httpStatus:
                    type: integer
                    example: 404
        401:
          description: "Client non authentifié"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Client non authentifié"
                  httpStatus:
                    type: integer
                    example: 401
        500:
          description: "Erreur serveur lors de la récupération des notifications lues"
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des notifications lues."
                  httpStatus:
                    type: integer
                    example: 500

  /demandes/all:
    get:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Obtenir toutes les demandes du client"
      description: "Récupère toutes les demandes de dette pour le client connecté avec une option de filtrage par état."
      operationId: "getAllClientDemandes"
      parameters:
        - name: etat
          in: query
          description: "Filtrer les demandes par état (En cours, Annulée)"
          required: false
          schema:
            type: string
            enum: [En cours, Annulée]
      responses:
        200:
          description: "Demandes récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: "Demandes récupérées avec succès."
                  HttpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune demande trouvée pour le client."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Aucune demande trouvée pour le client."
                  HttpStatus:
                    type: integer
                    example: 404
        401:
          description: "Client non authentifié."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Error"
                  message:
                    type: string
                    example: "Client non authentifié."
                  HttpStatus:
                    type: integer
                    example: 401
        500:
          description: "Erreur serveur lors de la récupération des demandes."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la récupération des demandes."
                  HttpStatus:
                    type: integer
                    example: 500

  /demandes/{demandeId}/disponible:
    get:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Vérifier la disponibilité des articles pour une demande"
      description: "Vérifie les articles disponibles et non disponibles pour une demande spécifique."
      operationId: "checkDisponibilite"
      parameters:
        - name: demandeId
          in: path
          description: "ID de la demande"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Disponibilité des articles récupérée avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  articles_disponibles:
                    type: array
                    items:
                      type: object
                  articles_non_disponibles:
                    type: array
                    items:
                      type: object
        404:
          description: "Demande non trouvée."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Demande non trouvée."
        500:
          description: "Erreur serveur lors de la vérification de la disponibilité."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la vérification de la disponibilité."

  /demandes/{demandeId}:
    patch:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Mettre à jour une demande"
      description: "Met à jour le statut d'une demande existante. Le statut ne peut être modifié que si la demande est en cours."
      operationId: "update"
      parameters:
        - name: demandeId
          in: path
          description: "ID de la demande"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  description: "Nouveau statut de la demande"
                  example: "En cours"
                motif:
                  type: string
                  description: "Motif de l'annulation, requis si le statut est 'Annulée'"
                  example: "Motif de l'annulation"
      responses:
        200:
          description: "Demande mise à jour avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "Demande mise à jour avec succès."
        404:
          description: "Demande non trouvée."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Demande non trouvée."
        400:
          description: "État de demande invalide."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "État de demande invalide."
        500:
          description: "Erreur serveur lors de la mise à jour de la demande."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la mise à jour de la demande."

  /demandes:
    post:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Créer une nouvelle demande"
      description: "Soumet une nouvelle demande de dette pour le client connecté."
      operationId: "store"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                articles:
                  type: array
                  description: "Liste des articles pour la demande."
                  items:
                    type: object
                    properties:
                      libelle:
                        type: string
                        description: "Libellé de l'article"
                        example: "Boisson Fanta"
                      qte:
                        type: integer
                        description: "Quantité de l'article"
                        example: 2
      responses:
        200:
          description: "Demande soumise avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  demande:
                    type: object
                  message:
                    type: string
                    example: "Demande de dette soumise avec succès."
                  HttpStatus:
                    type: integer
                    example: 200
        404:
          description: "Client non trouvé pour l'utilisateur."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Client non trouvé pour l’utilisateur."
                  HttpStatus:
                    type: integer
                    example: 404
        400:
          description: "Données de demande invalides."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Données de demande invalides."
                  HttpStatus:
                    type: integer
                    example: 400
        500:
          description: "Erreur serveur lors de la soumission de la demande."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la soumission de la demande."
                  HttpStatus:
                    type: integer
                    example: 500

    get:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Obtenir les demandes du client"
      description: "Récupère toutes les demandes de dette pour le client connecté, avec une option de filtrage par état. Retourne un message d'erreur si le client n'est pas trouvé ou si l'état est invalide."
      operationId: "getClientDemandes"
      parameters:
        - name: etat
          in: query
          description: "Filtrer les demandes par état (En cours, Annulée). Si non fourni, toutes les demandes sont récupérées."
          required: false
          schema:
            type: string
            enum: [En cours, Annulée]
      responses:
        200:
          description: "Demandes récupérées avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Success"
                  data:
                    type: array
                    items:
                      type: object
                  message:
                    type: string
                    example: "Demandes récupérées avec succès."
                  HttpStatus:
                    type: integer
                    example: 200
        404:
          description: "Aucune demande trouvée pour le client ou client non trouvé."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Client non trouvé pour l’utilisateur."  # Ou "Aucune demande de dette n’a été trouvée pour le client."
                  HttpStatus:
                    type: integer
                    example: 404
        400:
          description: "État de demande invalide."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "État invalide."
                  HttpStatus:
                    type: integer
                    example: 400
        401:
          description: "Utilisateur non authentifié."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Utilisateur non authentifié."
                  HttpStatus:
                    type: integer
                    example: 401
        500:
          description: "Erreur serveur lors de la récupération des demandes."
          content:
            application/json:
              schema:
                type: object
                properties:
                  statut:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur serveur lors de la récupération des demandes."
                  HttpStatus:
                    type: integer
                    example: 500

  /demandes/{demandeId}/relance:
    post:
      tags:
        - Demande
      security:
        - bearerAuth: []
      summary: "Relancer une demande"
      description: "Envoie une relance pour une demande de dette spécifique."
      operationId: "relancerDemande"
      parameters:
        - name: demandeId
          in: path
          description: "ID de la demande"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Demande relancée avec succès."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Success"
                  message:
                    type: string
                    example: "Demande relancée avec succès."
                  HttpStatus:
                    type: integer
                    example: 200
        404:
          description: "Demande non trouvée."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Demande non trouvée."
                  HttpStatus:
                    type: integer
                    example: 404
        500:
          description: "Erreur serveur lors de la relance de la demande."
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Echec"
                  message:
                    type: string
                    example: "Erreur lors de la relance de la demande."
                  HttpStatus:
                    type: integer
                    example: 500

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
